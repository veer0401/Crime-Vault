@await Html.PartialAsync("Sections/_Variables")
@{
  TempData.Keep();
  Layout = "_CommonMasterLayout";

  ViewData["customizerHidden"] = (ViewData["customizerHidden"] ??= "customizer-hide");
  TempData["menuHorizontal"] = false;
  ViewData["contentNavbar"] = false;

  @* Display elements *@
  ViewData["isNavbar"] = (ViewData["isNavbar"] ??= true);
  ViewData["isMenu"] = (ViewData["isMenu"] ??= true);
  ViewData["isFlex"] = (ViewData["isFlex"] ??= false);
  ViewData["isFooter"] = (ViewData["isFooter"] ??= true);

  @*HTML Classes *@
  ViewData["navbarDetached"] = (ViewData["navbarDetached"] ?? "navbar-detached");
  ViewData["menuFixed"] = (ViewData["menuFixed"] ?? "layout-menu-fixed");
  ViewData["navbarType"] = (ViewData["navbarType"] ?? "layout-navbar-fixed");

  @*Content classes *@
  ViewData["container"] = (ViewData["container"] ?? "container-xxl");
  ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-xxl");
}

@section VendorStyles{ @RenderSection("VendorStyles", required: false) }

@section PageStyles{ @RenderSection("PageStyles", required: false) }

@section VendorScripts{ @RenderSection("VendorScripts", required: false) }

@section PageScripts{ @RenderSection("PageScripts", required: false) }

@{
  bool isMenu = ViewData["isMenu"] != null && Convert.ToBoolean(ViewData["isMenu"]);
}

<div class='layout-wrapper layout-content-navbar @(isMenu ? "" : "layout-without-menu")'>
  <div class='layout-container'>

    @if (isMenu)
    {
      @await Html.PartialAsync("Sections/Menu/_VerticalMenu")
    }

    <!-- Layout page -->
    <div class="layout-page">
      <!-- Navbar -->
      @if (@ViewData["isNavbar"] != null && Convert.ToBoolean(@ViewData["isNavbar"]))
      {
        @await Html.PartialAsync("Sections/Navbar/_Navbar")
      }
      <!-- / Navbar -->

      <!-- Content wrapper -->
      <div class="content-wrapper">
        <!-- Content -->
        <div class='@ViewData["container"] @(Convert.ToBoolean(@ViewData["isFlex"]) ? "d-flex align-items-stretch flex-grow-1 p-0" : "flex-grow-1 container-p-y")'>
          @RenderBody()
        </div>
        <!-- / Content -->

        <!-- Footer -->
        @if (@ViewData["isFooter"] != null && Convert.ToBoolean(@ViewData["isFooter"]))
        {
          @await Html.PartialAsync("Sections/Footer/_Footer")
        }
        <!-- / Footer -->
        <div class="content-backdrop fade"></div>
      </div>
      <!--/ Content wrapper -->
    </div>
    <!-- / Layout page -->
  </div>

  <!-- Overlay -->
  @if (@ViewData["isMenu"] != null && Convert.ToBoolean(@ViewData["isMenu"]))
  {
    <div class="layout-overlay layout-menu-toggle"></div>
  }
  <!-- Drag Target Area To SlideIn Menu On Small Screens -->
  <div class="drag-target"></div>
</div>

<!-- Anti-forgery token for AJAX requests -->
@Html.AntiForgeryToken()

@RenderSection("scripts", required: false)

<!-- Auto-logout script -->
<script>
    // Helper function to show toast messages
    function showToast(type, message, title = '') {
        const toastOptions = {
            closeButton: true,
            progressBar: true,
            timeOut: 3000,
            extendedTimeOut: 1000,
            positionClass: 'toast-top-right'
        };

        switch (type.toLowerCase()) {
            case 'success':
                toastr.success(message, title, toastOptions);
                break;
            case 'error':
                toastr.error(message, title, toastOptions);
                break;
            case 'warning':
                toastr.warning(message, title, toastOptions);
                break;
            case 'info':
                toastr.info(message, title, toastOptions);
                break;
        }
    }

    // Auto logout after 10 seconds of inactivity
    let timeout;
    const logoutTime = 150000; // 10 seconds in milliseconds

    function resetTimeout() {
        clearTimeout(timeout);
        timeout = setTimeout(logout, logoutTime);
    }

    async function logout() {
        try {
            const response = await fetch('/Account/AutoLogout', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                    'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                }
            });

            if (response.ok) {
                showToast('warning', 'You have been logged out due to inactivity', 'Session Expired');
                setTimeout(() => {
                    window.location.href = '/Account/Login';
                }, 3000);
            } else {
                console.error('Failed to logout:', response.statusText);
                window.location.href = '/Account/Login';
            }
        } catch (error) {
            console.error('Error during logout:', error);
            window.location.href = '/Account/Login';
        }
    }

    // Reset timeout on any user activity
    document.addEventListener('mousemove', resetTimeout);
    document.addEventListener('keypress', resetTimeout);
    document.addEventListener('click', resetTimeout);
    document.addEventListener('scroll', resetTimeout);
    document.addEventListener('touchstart', resetTimeout);
    document.addEventListener('touchmove', resetTimeout);

    // Initialize timeout when page loads
    document.addEventListener('DOMContentLoaded', function() {
        resetTimeout();
        
        // Show welcome message if user just logged in
        const loginSuccess = document.getElementById('loginSuccessFlag');
        if (loginSuccess && loginSuccess.value === 'true') {
            showToast('success', 'Welcome back! You have successfully logged in.', 'Login Successful');
        }
    });
</script> 