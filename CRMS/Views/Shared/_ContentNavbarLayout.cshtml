@await Html.PartialAsync("Sections/_Variables")
@{
  TempData.Keep();
  Layout = "_CommonMasterLayout";

    ViewData["customizerHidden"] = (ViewData["customizerHidden"] ??= "customizer-hide");
    TempData["menuHorizontal"] = false;
  ViewData["contentNavbar"] = false;
    @RenderSection("Scripts", required: false)

  @* Display elements *@
  ViewData["isNavbar"] = (ViewData["isNavbar"] ??= true);
  ViewData["isMenu"] = (ViewData["isMenu"] ??= true);
  ViewData["isFlex"] = (ViewData["isFlex"] ??= false);
  ViewData["isFooter"] = (ViewData["isFooter"] ??= true);
  @* ViewData["customizerHidden"] = (ViewData["customizerHidden"] ??= "customizer-hide"); *@


  @*HTML Classes *@
  ViewData["navbarDetached"] = (ViewData["navbarDetached"] ?? "navbar-detached");
  ViewData["menuFixed"] = (ViewData["menuFixed"] ?? "layout-menu-fixed");
  ViewData["navbarType"] = (ViewData["navbarType"] ?? "layout-navbar-fixed");
  @* ViewData["footerFixed"] = (ViewData["footerFixed"] ?? "layout-footer-fixed");
    ViewData["menuCollapsed"] = (ViewData["menuCollapsed"] ?? "layout-menu-collapsed"); *@

  @*Content classes *@
  ViewData["container"] = (ViewData["container"] ?? "container-xxl");
  ViewData["containerNav"] = (ViewData["containerNav"] ?? "container-xxl");
}

@section VendorStyles{ @RenderSection("VendorStyles", required: false) }

@section PageStyles{ @RenderSection("PageStyles", required: false) }

@section VendorScripts{ @RenderSection("VendorScripts", required: false) }

@section PageScripts{ @RenderSection("PageScripts", required: false) }

@{
  bool isMenu = ViewData["isMenu"] != null && Convert.ToBoolean(ViewData["isMenu"]);
}

<div class='layout-wrapper layout-content-navbar @(isMenu ? "" : "layout-without-menu")'>
  <div class='layout-container'>

    @if (isMenu)
    {
      @await Html.PartialAsync("Sections/Menu/_VerticalMenu")
    }

    <!-- Layout page -->
    <div class="layout-page">
      <!-- Navbar -->
      @if (@ViewData["isNavbar"] != null && Convert.ToBoolean(@ViewData["isNavbar"]))
      {
        @await Html.PartialAsync("Sections/Navbar/_Navbar")
      }
      <!-- / Navbar -->


      <!-- Content wrapper -->
      <div class="content-wrapper">

        <!-- Content -->
        <div class='@ViewData["container"] @(Convert.ToBoolean(@ViewData["isFlex"]) ? "d-flex align-items-stretch flex-grow-1 p-0" : "flex-grow-1 container-p-y")'>
          @RenderBody()
        </div>
        <!-- / Content -->

        <!-- Footer -->
        @if (@ViewData["isFooter"] != null && Convert.ToBoolean(@ViewData["isFooter"]))
        {
          @await Html.PartialAsync("Sections/Footer/_Footer")
        }
        <!-- / Footer -->
        <div class="content-backdrop fade"></div>
      </div>
      <!--/ Content wrapper -->
    </div>
    <!-- / Layout page -->
  </div>

  <!-- Overlay -->
  @if (@ViewData["isMenu"] != null && Convert.ToBoolean(@ViewData["isMenu"]))
  {
    <div class="layout-overlay layout-menu-toggle"></div>
  }
  <!-- Drag Target Area To SlideIn Menu On Small Screens -->
  <div class="drag-target"></div>
</div>

<div class="avatar avatar-online">
    @using Microsoft.AspNetCore.Identity
    @inject UserManager<Users> UserManager
    @inject SignInManager<Users> SignInManager
    @inject RoleManager<IdentityRole> RoleManager

    @if (SignInManager.IsSignedIn(User))
    {
        var user = await UserManager.GetUserAsync(User);
        <span class="avatar-initial rounded-circle bg-label-primary">@user?.FullName[0]</span>
    }
</div>

<a href="#" class="dropdown-item">
  <div class="d-flex align-items-center">
    <div class="flex-shrink-0 me-2">
      <div class="avatar avatar-online">
        @if (SignInManager.IsSignedIn(User))
        {
            var user = await UserManager.GetUserAsync(User);
            var roles = await UserManager.GetRolesAsync(user);
            <span class="avatar-initial rounded-circle bg-label-primary">@user?.FullName[0]</span>
            <div class="flex-grow-1">
                <h6 class="mb-0">@user?.FullName</h6>
                <small class="text-muted">@(roles.Any() ? string.Join(", ", roles) : "No Role Assigned")</small>
            </div>
        }
      </div>
    </div>
  </div>
</a>

<ul class="dropdown-menu dropdown-menu-end">
  <li>
    <a class="dropdown-item mt-0" asp-controller="Pages" asp-action="AccountSettings">
      <div class="d-flex align-items-center">
        <div class="flex-shrink-0 me-2">
          <div class="avatar avatar-online">
            @if (SignInManager.IsSignedIn(User))
            {
                var user = await UserManager.GetUserAsync(User);
                var roles = await UserManager.GetRolesAsync(user);
                <span class="avatar-initial rounded-circle bg-label-primary">@user?.FullName[0]</span>
                <div class="flex-grow-1">
                    <h6 class="mb-0">@user?.FullName</h6>
                    <small class="text-muted">@(roles.Any() ? string.Join(", ", roles) : "No Role Assigned")</small>
                </div>
            }
          </div>
        </div>
      </div>
    </a>
  </li>
</ul>

<!DOCTYPE html>
<html lang="en">
<head>
    <!-- ... existing head content ... -->
</head>
<body>
    <!-- Anti-forgery token for AJAX requests -->
    @Html.AntiForgeryToken()

    <!-- ... existing body content ... -->

    @RenderSection("scripts", required: false)

    <!-- Auto-logout script -->
    <script>
        // Auto logout after 10 seconds of inactivity
        let timeout;
        const logoutTime = 10000; // 10 seconds in milliseconds

        function resetTimeout() {
            clearTimeout(timeout);
            timeout = setTimeout(logout, logoutTime);
        }

        async function logout() {
            try {
                // First, call the server to clear the session
                const response = await fetch('/Account/AutoLogout', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json',
                        'RequestVerificationToken': document.querySelector('input[name="__RequestVerificationToken"]').value
                    }
                });

                if (response.ok) {
                    // Show logout message using toastr
                    if (typeof toastr !== 'undefined') {
                        toastr.warning('You have been logged out due to inactivity', 'Session Expired', {
                            timeOut: 3000,
                            closeButton: true,
                            progressBar: true
                        });
                    }

                    // Redirect to login page after a short delay
                    setTimeout(() => {
                        window.location.href = '/Account/Login';
                    }, 3000);
                } else {
                    console.error('Failed to logout:', response.statusText);
                    window.location.href = '/Account/Login'; // Redirect anyway if the server call fails
                }
            } catch (error) {
                console.error('Error during logout:', error);
                window.location.href = '/Account/Login'; // Redirect anyway if there's an error
            }
        }

        // Reset timeout on any user activity
        document.addEventListener('mousemove', resetTimeout);
        document.addEventListener('keypress', resetTimeout);
        document.addEventListener('click', resetTimeout);
        document.addEventListener('scroll', resetTimeout);
        document.addEventListener('touchstart', resetTimeout);
        document.addEventListener('touchmove', resetTimeout);

        // Initialize timeout when page loads
        document.addEventListener('DOMContentLoaded', function() {
            resetTimeout();
        });
    </script>

    <!-- ... any other existing scripts ... -->
</body>
</html>
